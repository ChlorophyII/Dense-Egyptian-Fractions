@SY-MBP:code $ scheme
Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> (load "efrac.so")
> (efrac (range 1 23) 3)
----------------------
collector    branches
0            0
()
> (efrac (range 1 24) 3)
----------------------
collector    branches
1            0
((1 2 3 4 5 6 8 9 10 15 18 20 24))          ; This is a list of branches, efrac-5
> (set! efrac-3 (efrac (range 1 24) 3))
----------------------
collector    branches
1            0
> efrac-3
((1 2 3 4 5 6 8 9 10 15 18 20 24))
> (set! efrac-4 (efrac (range 1 65) 4))
----------------------
collector    branches
0            2
----------------------
collector    branches
1            0
> efrac-4
((1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 20 22 24 26 27
  28 30 33 35 36 40 42 45 48 52 54 56 60 63 65))
> (set-difference (car efrac-4) (car efrac-3))              ; (car l) is the first element in l
(7 11 12 13 14 16 22 26 27 28 30 33 35 36 40 42 45 48 52 54
 56 60 63 65)                                               
> (set-difference (car efrac-3) (car efrac-4))          
()                                                          ; empty, hence (car efrac-3) is a subset of (car efrac-4)
> (efrac (range 1 183) 5)
----------------------
collector    branches
0            4
----------------------
collector    branches
0            8
----------------------
collector    branches
0            19
----------------------
collector    branches
0            100
----------------------
collector    branches
0            314
----------------------
collector    branches
0            152
----------------------
collector    branches
0            58
----------------------
collector    branches
0            12
----------------------
collector    branches
0            4
----------------------
collector    branches
0            0
()
> (set! efrac-5 (efrac (range 1 184) 5))
----------------------
collector    branches
0            4
----------------------
collector    branches
0            8
----------------------
collector    branches
0            20
----------------------
collector    branches
0            109
----------------------
collector    branches
0            382
----------------------
collector    branches
0            448
----------------------
collector    branches
0            346
----------------------
collector    branches
0            260
----------------------
collector    branches
0            180
----------------------
collector    branches
4            48
----------------------
collector    branches
16            20
----------------------
collector    branches
16            0
> (length efrac-5)                  
16                                                   ; 16 branches
> (set! efrac-5-inter (sets-intersection efrac-5))   ; sets-intersection takes a list of lists as argument
> efrac-5-inter
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 30 32 33 34 35 36 38 39 40 42 44 45 48 50 51
 52 54 55 56 60 62 63 65 66 68 70 72 75 76 77 78 80 81 84 85
 88 90 91 92 93 99 102 104 105 108 110 112 115 116 117 126
 130 133 136 140 143 144 145 153 154 155 156 161 162 170 171
 180 184)
> (set-difference (car efrac-4) efrac-5-inter)       
()                                                   ; empty, hence (car efrac-4) is a subset of efrac-5-inter
> (set-intersection (car efrac-4) efrac-5-inter)     ; set-intersection takes two list as arguments
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 20 22 24 26 27 28
 30 33 35 36 40 42 45 48 52 54 56 60 63 65)          ; the intersection is precisely (car efrac-4)
> (time (efrac (range 1 468) 6))                     ; timing function
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            4
----------------------
collector    branches
0            12
----------------------
collector    branches
0            29
----------------------
collector    branches
0            88
----------------------
collector    branches
0            669
----------------------
collector    branches
0            615
----------------------
collector    branches
0            578
----------------------
collector    branches
0            632                ; note that the number of branches may increase again
----------------------
collector    branches
0            296
----------------------
collector    branches
0            78
----------------------
collector    branches
0            20
----------------------
collector    branches
0            6
----------------------
collector    branches
0            0
(time (efrac (range 1 ...) ...))
    264 collections
    3.927160928s elapsed cpu time, including 0.245807468s collecting
    3.930960000s elapsed real time, including 0.246525000s collecting
    2227523856 bytes allocated, including 2234512752 bytes reclaimed
()
> (time (efrac (set-difference (range 1 468) efrac-5-inter) (- 6 (rec-sum efra
c-5-inter))))                                        ; here I used the method mentioned in the e-mail, which significantly reduces the time
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            4
----------------------
collector    branches
0            12
----------------------
collector    branches
0            29
----------------------
collector    branches
0            88
----------------------
collector    branches
0            669
----------------------
collector    branches
0            615
----------------------
collector    branches
0            578
----------------------
collector    branches
0            632
----------------------
collector    branches
0            296
----------------------
collector    branches
0            76
----------------------
collector    branches
0            20
----------------------
collector    branches
0            6
----------------------
collector    branches
0            0
(time (efrac (set-difference (...) ...) ...))
    173 collections
    2.903594194s elapsed cpu time, including 0.054467127s collecting        ; note that the time has decreased 1 second
    2.907293000s elapsed real time, including 0.054891000s collecting
    1458904224 bytes allocated, including 1473896064 bytes reclaimed
()
> (factor 469)
((7 1) (67 1))
> (factor 470)
((2 1) (5 1) (47 1))                                                        ; 470 is a 47-smooth number
> (time (efrac (set-difference (range 1 470) efrac-5-inter) (- 6 (rec-sum efra
c-5-inter))))
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            2
----------------------
collector    branches
0            6
----------------------
collector    branches
0            18
----------------------
collector    branches
0            48
----------------------
collector    branches
0            197
----------------------
collector    branches
0            2583
----------------------
collector    branches
0            8656
----------------------
collector    branches
0            16898
^Cbreak> q                              ; "control + c", then "q" to quit the handler, or "e" to continue

> (map rec-sum efrac-3)
(3)
> (map rec-sum efrac-4)
(4)
> (map rec-sum efrac-5)
(5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5)       ; check that the computations are correct
> (set! efrac-3/2 (efrac (range 1 15) 3/2))
----------------------
collector    branches
1            3
----------------------
collector    branches
3            2
----------------------
collector    branches
4            2
----------------------
collector    branches
4            0
> (map rec-sum efrac-3/2)
(3/2 3/2 3/2 5/2)                                                       ; notice the 5/2                                                        
> efrac-3/2
((1 3 6) (1 4 6 12) (1 2) (1 2 3 4 6 10 12 15))                         ; the result given by "efrac" procedure
> (set! efrac-3/2-t (filter (lambda (x) (= (rec-sum x) 3/2)) (power-set (range
 1 15))))                                                               ; true Egyptian fraction representations of 3/2, with denominators less than 15
> efrac-3/2-t
((2 3 4 6 10 12 15) (1 4 10 12 15) (1 4 6 12) (1 3 10 15)
  (1 3 6) (1 2))
> (map rec-sum efrac-3/2-t)
(3/2 3/2 3/2 3/2 3/2 3/2)
> (set-difference efrac-3/2-t efrac-3/2)
((2 3 4 6 10 12 15) (1 4 10 12 15) (1 3 10 15))                         ; branches ommited by "efrac" procedure
> (set-difference efrac-3/2 efrac-3/2-t)
((1 2 3 4 6 10 12 15))                                                  ; branches which rec-sum to 5/2
> 
